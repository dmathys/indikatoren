{"name":"shrinkpack","description":"Fast, resilient, reproducible builds with npm install.","version":"0.18.1","author":{"name":"Jamie Mason","url":"https://github.com/JamieMason"},"ava":{"files":["test/e2e/test.js"]},"bin":{"shrinkpack":"cli.js"},"bugs":{"url":"https://github.com/JamieMason/shrinkpack/issues"},"config":{"commitizen":{"path":"./node_modules/cz-conventional-changelog"}},"contributors":[{"name":"Andrew Levine","url":"https://github.com/DrewML"},{"name":"Chris Wheatley","url":"https://github.com/swirlycheetah"},{"name":"David Cook","url":"https://github.com/divergentdave"},{"name":"Dmytro Tolstyi","url":"https://github.com/GitAngel"},{"name":"Dylan Piercey","url":"https://github.com/DylanPiercey"},{"name":"Emil Sågfors","url":"https://github.com/lime"},{"name":"Jason Hewison","url":"https://github.com/ChunkySamurai"},{"name":"Kirill Fomichev","url":"https://github.com/fanatid"},{"name":"Mark Erikson","url":"https://github.com/markerikson"},{"name":"Scott Sidwell","url":"https://github.com/5id"},{"name":"Zlatan Vasović","url":"https://github.com/zdroid"}],"dependencies":{"chalk":"1.1.3","commander":"2.9.0","execa":"0.5.0","graceful-fs":"4.1.11","gunzip-maybe":"1.3.1","lodash.assign":"4.2.0","when":"3.7.7"},"devDependencies":{"ava":"0.17.0","commit-release":"0.6.2","cz-conventional-changelog":"1.2.0","husky":"0.12.0","rimraf":"2.5.4","validate-commit-msg":"2.8.2","xo":"0.17.1"},"engines":{"node":">=4.0","npm":"<3.8.8 || >3.10.3"},"files":["cli.js","index.js","src"],"homepage":"https://github.com/JamieMason/shrinkpack","keywords":["bundle","cache","deploy","deployments","import","install","npm","offline","package","save","shrinkwrap"],"license":"MIT","main":"shrinkpack","repository":{"type":"git","url":"git+https://github.com/jamiemason/shrinkpack.git"},"scripts":{"commit-release":"commit-release","commitmsg":"validate-commit-msg","lint":"xo --fix","precommit":"npm run lint","test":"ava"},"xo":{"envs":["node"],"esnext":false,"space":2},"readme":"# shrinkpack\n\n[![NPM version](http://img.shields.io/npm/v/shrinkpack.svg?style=flat-square)](https://www.npmjs.com/package/shrinkpack)\n[![NPM downloads](http://img.shields.io/npm/dm/shrinkpack.svg?style=flat-square)](https://www.npmjs.com/package/shrinkpack)\n[![Build Status](http://img.shields.io/travis/JamieMason/shrinkpack/master.svg?style=flat-square)](https://travis-ci.org/JamieMason/shrinkpack)\n[![Dependency Status](http://img.shields.io/david/JamieMason/shrinkpack.svg?style=flat-square)](https://david-dm.org/JamieMason/shrinkpack)\n[![Join the chat at https://gitter.im/JamieMason/shrinkpack](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/JamieMason/shrinkpack)\n[![Analytics](https://ga-beacon.appspot.com/UA-45466560-5/shrinkpack?flat&useReferer)](https://github.com/igrigorik/ga-beacon)\n\nShrinkpack complements the [npm shrinkwrap](https://docs.npmjs.com/cli/shrinkwrap) command by\nmaintaining a `node_shrinkwrap` directory in your project, containing the exact same tarballs that\n`npm install` downloads from [https://registry.npmjs.org](https://registry.npmjs.org).\n\nThe rest of the `npm install` process is exactly the same. The only difference is that no network\nactivity is necessary when installing and building your project. The `node_shrinkwrap` directory can\nbe ignored in your editor (much like is done with the `node_modules` directory) but is instead\nchecked into source control.\n\n> For context, please see the [target problem](#target-problem) and [justification](#justification)\n> sections of this README.\n\n## Contents\n\n* [Installation](#installation)\n* [Usage](#usage)\n  * [Command Line](#command-line)\n  * [Node.js](#nodejs)\n* [Target Problem](#target-problem)\n* [Justification](#justification)\n  * [npm shrinkwrap](#npm-shrinkwrap)\n  * [shrinkpack](#shrinkpack-1)\n* [Suitability to your project](#suitability-to-your-project)\n* [Tutorial](#tutorial)\n  * [Create a new project](#create-a-new-project)\n  * [Set some sensible npm defaults](#set-some-sensible-npm-defaults)\n  * [Install dependencies](#install-dependencies)\n  * [Shrinkwrap dependencies](#shrinkwrap-dependencies)\n  * [Create a project-specific cache (optional)](#create-a-project-specific-cache-optional)\n  * [Shrinkpack dependencies](#shrinkpack-dependencies)\n  * [Check into Git](#check-into-git)\n  * [Clean install](#clean-install)\n  * [Update Dependencies](#update-dependencies)\n  * [Toggle Compression](#toggle-compression)\n  * [Remove Optional Dependencies](#remove-optional-dependencies)\n\n## Installation\n\n```\nnpm install --global shrinkpack\n```\n\n> **Note:** npm had a [regression affecting shrinkwrap](https://github.com/npm/npm/pull/13214) in\n> versions 3.8.8 to 3.10.3.<br>\n> Please ensure your version of `npm` is 3.10.4 or newer, or 3.8.7 or older.\n\n## Usage\n\n### Command Line\n\n```\nUsage: shrinkpack [options] [directory]\n\nOptions:\n\n  -h, --help           output usage information\n  -V, --version        output the version number\n  -c, --compress       use compressed .tgz tarballs instead of .tar\n  -o, --keep-optional  do not exclude optional dependencies\n\nIcons:\n\n  + Added\n  ↓ Downloaded\n  → Imported from Cache\n  i Information\n  - Removed\n  ✓ Resolved\n  12:34 Time Taken\n\nCompression:\n\n  Although compressed .tgz files have lower filesizes, storing binary files in\n  Git can result in a gradual increase in the time it takes to push to your\n  repository. Shrinkpack uses uncompressed, plain text .tar files by default,\n  which are handled optimally by Git in the same way that .md, .js, and .css\n  files are for example.\n```\n\n### Node.js\n\nShrinkpack works in 2 phases;\n\n1. Analyse the project and gather all the diffing information between the file system and the shrinkwrap.\n2. Use the diffing information to bring the file system in sync with the shrinkwrap.\n\n```js\nvar shrinkpack = require('shrinkpack');\n\nshrinkpack.analyse({ compress: false, directory: process.cwd(), keepOptional: false })\n  .then(data => shrinkpack.update(data));\n```\n\nOr to run `shrinkpack` in full, including all the additional logging that you see when using the CLI.\n\n```js\nvar shrinkpack = require('shrinkpack');\n\nshrinkpack.cli({ compress: false, directory: process.cwd(), keepOptional: false })\n  .then(() => {});\n```\n\n## Target Problem\n\nOn most projects I've worked on we've had a [Jenkins](http://jenkins-ci.org/) (or similiar)\ncontinuous integration environment, where we would run tests, analyse code, gather metrics, and\ncreate deployment packages.\n\nEach time code was pushed to our `develop` and `master` branches, a repeatable process was carried\nout where a clean workspace was created, the latest version of the project was installed and\nconfigured, then testing and code analysis took place.\n\nWe were all very happy with this process and the convenience of npm in particular, but the phase of\nour builds where `npm install` listed a huge amount of network traffic would always raise the same\nconcerns;\n\n+ This seems slow, wasteful, and inefficient.\n+ We _really_ depend on registry.npmjs.org, what do we do if it goes down?\n\nThe first suggestion was always to check in our dependencies, but the idea of some large and chatty\ncommits whenever we chose to upgrade or change them would put us off.\n\nSome teams went a little further and decided that pain was acceptable and decided to proceed, only\nto find that some packages such as [phantomjs](https://www.npmjs.com/package/phantomjs) and\n[node-sass](https://github.com/sass/node-sass) helpfully install the appropriate binary for you\ndepending on what system you're running.\n\nThis meant that if Chris added `phantomjs` or `node-sass` to the project on his Mac and checked it\ninto the repository, Helen wouldn't be able to use it on her  Windows Machine.\n\nThe remaining alternatives were proxies, mirrors, and caches-of-sorts. None of which appealed to us\nand, grudgingly, we continued as we were (<abbr title=\"Your Mileage May Vary\">YMMV</abbr>).\n\n## Justification\n\nWhenever we add, remove, or update an npm dependency — we should test our application for\nregressions before locking down our dependencies to avoid them mutating over time.\n\n+ You can't be sure of this without `npm shrinkwrap`.\n+ Checking in `node_modules` is horrible (and doesn't work in many cases anyway).\n+ You can be reasonably sure of this with `npm shrinkwrap`.\n+ You can be completely sure of this with `npm shrinkwrap` and `shrinkpack`.\n\n### npm shrinkwrap\n\n`npm shrinkwrap` is something I would recommend you use anyway, even if you don't decide to use\n`shrinkpack`. It brings certainty and confidence over exactly what versions of every nested\ndependency you've tested against and approved.\n\nA tagged release should be a locked-down, fixed point in time which has been tested sufficiently\nenough that it is approved and trusted. When fed into a repeatable, automated deployment process it\nshould always result in the same output.\n\nWithout `npm shrinkwrap` that's not guaranteed.\n\nConsider this snippet from the `package.json` of a nested dependency in your project as an example;\n\n```json\n\"dependencies\": {\n  \"lolwut\": \">=0.1.0\"\n}\n```\n\nIf `lolwut@0.2.4` contains a regression and you're not using `npm shrinkwrap`, your project now\ncontains a regression.\n\n### shrinkpack\n\nWith you hopefully convinced of the merits of `npm shrinkwrap`, `shrinkpack` will hopefully be seen\nas a small and complementary addition.\n\n`shrinkpack` takes the .tgz tarballs of that specific, shrinkwrapped dependency graph saved by `npm\nshrinkwrap` and stores them within your project.\n\nThis means;\n\n+ No need for repeated requests to registry.npmjs.org.\n+ Each package/version pair can be checked in as a single tarball, avoiding commits with all kinds\n  of noisy diffs.\n+ Packages can be checked in, while still installed by members of the team on different operating\n  systems.\n+ Complements the typical `npm shrinkwrap` workflow.\n\n## Suitability to your project\n\n`shrinkpack` is intended for Developers of Apps, Blogs, and Websites – any project which is the root\nconsumer of dependencies and not a dependency itself. If your project is intended to be installed as\na dependency of another project using `npm install`, let those downstream projects make their own\ndecisions on bundling.\n\nThat said, if you're developing an npm package and want to use `shrinkpack` to speed up and\nharden your development and CI environments, adding `npm-shrinkwrap.json` and `node_shrinkwrap` to\nyour `.npmignore` file will allow you to do that, without publishing your shrinkpacked dependencies\nto the registry.\n\nIt's not recommended to publish a project with bundled or shrinkpacked dependencies to the registry.\nIf that approach were to gain traction, it is likely that the registry would become bloated due to\nthe build up of duplicate copies of packages, bundled amongst various other ones.\n\n## Tutorial\n\n### Create a new project\n\nHere we create a straightforward project which will use Git and npm.\n\n```\nmkdir shrinkpack-demo\ncd shrinkpack-demo\ngit init\necho node_modules >> .gitignore\necho npm-debug.log >> .gitignore\nnpm init --yes\n```\n\n<a href=\"https://asciinema.org/a/83790\" target=\"_blank\"><img src=\"https://asciinema.org/a/83790.png\" alt=\"asciicast\"></a>\n\n### Set some sensible npm defaults\n\nThe default behaviour when installing in npm is to 1) not update package.json and 2) include\nwildcards such as `^`, `~`, or `*` in the version numbers stored in package.json if using the\n`--save` option when installing.\n\nWe want each version of our project to be identical every time it is built, so we can have complete\nconfidence when the time comes to ship it. Therefore, we want a package.json which is always up to\ndate and that contains the exact version numbers we have developed and tested against.\n\n```\necho save=true >> .npmrc\necho save-exact=true >> .npmrc\n```\n\n### Install dependencies\n\nFor the sake of an example, let's install the following packages. I've chosen an older version of\ncommander so that we can go through how to update a shrinkpacked project later.\n\n```\nnpm install async commander@2.7.1 express lodash request\n```\n\n<a href=\"https://asciinema.org/a/83792\" target=\"_blank\"><img src=\"https://asciinema.org/a/83792.png\" alt=\"asciicast\"></a>\n\nThis is typical behaviour, npm downloads the packages from the registry and installs them, leaving\nthe following directory structure;\n\n```\n├── .gitignore\n├── node_modules\n│   ├── (lots of files and folders)\n└── package.json\n```\n\n### Shrinkwrap dependencies\n\nThe `--dev` option tells npm to also include `devDependencies` when creating an\n`npm-shrinkwrap.json` for your project.\n\n```\nnpm shrinkwrap --dev\n```\n\n<a href=\"https://asciinema.org/a/83795\" target=\"_blank\"><img src=\"https://asciinema.org/a/83795.png\" alt=\"asciicast\"></a>\n\n### Create a project-specific cache (optional)\n\nWhen using `shrinkpack`, the local file path to dependencies will be added to the `npm` client's\n[local cache](https://docs.npmjs.com/cli/cache). This can be  problematic when working on several\nprojects on a single machine  ([#31](https://github.com/JamieMason/shrinkpack/issues/31)).\n\nThis step prevents npm from using this project as a registry should you install the same\npackage/version pair on another project on your machine.\n\n```\necho cache=node_cache >> .npmrc\necho /node_cache >> .gitignore\n```\n\n### Shrinkpack dependencies\n\nWhenever you run `npm install`, npm downloads a .tgz file from http://registry.npmjs.org containing\nthe installation for each package. Shrinkpack saves these files in a `node_shrinkwrap` directory in\nyour project, before updating each record in `npm-shrinkwrap.json` to point at those instead of the\npublic registry.\n\n```\nshrinkpack .\n```\n\nEach entry will look something like this\n\n```json\n\"lodash\": {\n  \"version\": \"4.0.0\",\n  \"from\": \"lodash@4.0.0\",\n  \"resolved\": \"./node_shrinkwrap/lodash-4.0.0.tgz\"\n}\n```\n\n<a href=\"https://asciinema.org/a/83796\" target=\"_blank\"><img src=\"https://asciinema.org/a/83796.png\" alt=\"asciicast\"></a>\n\n### Check into Git\n\nBy this point, `git status` should list the following untracked files;\n\n```\n.gitignore\n.npmrc\nnode_shrinkwrap/\nnpm-shrinkwrap.json\npackage.json\n```\n\nLet's check them in.\n\n```\ngit add .\ngit commit -m 'chore(project): initial commit'\n```\n\n<a href=\"https://asciinema.org/a/83797\" target=\"_blank\"><img src=\"https://asciinema.org/a/83797.png\" alt=\"asciicast\"></a>\n\n### Clean install\n\nWe check this code into Git and tell a co-worker that it's ready for them to contribute to.\n\nOnce they have cloned the project, our co-worker runs;\n\n```\nnpm install --loglevel http\n```\n\nThis is new behaviour, npm didn't hit the network at all. Instead it read the packages from the\n`node_shrinkwrap` directory directly and installed them straight away. Shrinkpack has allowed us to\ninstall our project without any network activity whatsoever – and in a fraction of the time.\n\nIf everything went to plan, the only output will be these expected warnings because we didn't choose\nto add a `description` or `repository` to our `package.json`.\n\n> ```\n> npm WARN shrinkpack-demo@1.0.0 No description\n> npm WARN shrinkpack-demo@1.0.0 No repository field.\n> ```\n\n<a href=\"https://asciinema.org/a/83799\" target=\"_blank\"><img src=\"https://asciinema.org/a/83799.png\" alt=\"asciicast\"></a>\n\n### Update Dependencies\n\nLater, we may choose to add, update, or remove some dependencies;\n\n```\nnpm install commander@2.9.0\nnpm install react\nnpm uninstall express\n```\n\nWith our local `node_modules` now up to date, we now need to update our `npm-shrinkwrap.json` file\nand get our `node_shrinkwrap` directory back in sync with the new changes.\n\n```\nnpm shrinkwrap --dev\nshrinkpack\n```\n\n<a href=\"https://asciinema.org/a/83806\" target=\"_blank\"><img src=\"https://asciinema.org/a/83806.png\" alt=\"asciicast\"></a>\n\n### Toggle Compression\n\nThe tarballs in the npm registry are gzipped for optimal network performance, but storing binary\nfiles in Git repositories is not optimal. Git is decentralized, so every developer has the full\nchange history on their computer. Changes in large binary files cause Git repositories to grow by\nthe size of the file in question every time the file is changed and committed, this growth directly\naffects the amount of data end users need to retrieve when they need to clone the repository.\n\nYou can toggle between compressed and uncompressed tarballs with `shrinkpack --compress`.\n\n<a href=\"https://asciinema.org/a/83810\" target=\"_blank\"><img src=\"https://asciinema.org/a/83810.png\" alt=\"asciicast\"></a>\n\n### Remove Optional Dependencies\n\n`optionalDependencies` are removed by default, to avoid issues when trying to `npm shrinkwrap` your\nproject on platforms where that optional dependency was not installed. More detail is available in\nthis [issue comment](https://github.com/JamieMason/shrinkpack/issues/17#issuecomment-202340196) and\nthis behaviour can be overriden by using `shrinkpack --keep-optional`.\n","readmeFilename":"README.md","_id":"shrinkpack@0.18.1","_shasum":"1ffc4db10cd16d87e712d7a185ef3830da373573","_resolved":"file:node_shrinkwrap/shrinkpack-0.18.1.tar","_from":"node_shrinkwrap/shrinkpack-0.18.1.tar"}