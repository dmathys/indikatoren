{
  "series": [
    {
      "color": "#b475ab",
      "index": 0,
      "type": "column",
      "pointWidth": "15",
      "legendIndex": 0,
      "data": [
        [
          "1",
          "Altstadt GB"
        ],
        [
          "2",
          "Vorstädte"
        ],
        [
          "3",
          "Am Ring"
        ],
        [
          "4",
          "Breite"
        ],
        [
          "5",
          "St. Alban"
        ],
        [
          "6",
          "Gundeldingen"
        ],
        [
          "7",
          "Bruderholz"
        ],
        [
          "8",
          "Bachletten"
        ],
        [
          "9",
          "Gotthelf"
        ],
        [
          "10",
          "Iselin"
        ],
        [
          "11",
          "St. Johann"
        ],
        [
          "12",
          "Altstadt KB"
        ],
        [
          "13",
          "Clara"
        ],
        [
          "14",
          "Wettstein"
        ],
        [
          "15",
          "Hirzbrunnen"
        ],
        [
          "16",
          "Rosental"
        ],
        [
          "17",
          "Matthäus"
        ],
        [
          "18",
          "Klybeck"
        ],
        [
          "19",
          "Kleinhüningen"
        ],
        [
          "20",
          "Riehen"
        ],
        [
          "30",
          "Bettingen"
        ]
      ],
      "name": "Wohnviertel_Name",
      "turboThreshold": 0
    },
    {
      "color": "#a8c4cb",
      "index": 0,
      "type": "column",
      "pointWidth": "15",
      "legendIndex": 1,
      "data": [
        [
          "1",
          753326
        ],
        [
          "2",
          1336980
        ],
        [
          "3",
          1254060
        ],
        [
          "4",
          584811
        ],
        [
          "5",
          2018470
        ],
        [
          "6",
          1665712
        ],
        [
          "7",
          721154
        ],
        [
          "8",
          1016764
        ],
        [
          "9",
          530215
        ],
        [
          "10",
          1054163
        ],
        [
          "11",
          2162573
        ],
        [
          "12",
          418542
        ],
        [
          "13",
          364318
        ],
        [
          "14",
          936298
        ],
        [
          "15",
          668674
        ],
        [
          "16",
          909569
        ],
        [
          "17",
          965424
        ],
        [
          "18",
          1154286
        ],
        [
          "19",
          413652
        ],
        [
          "20",
          1584523
        ],
        [
          "30",
          128435
        ]
      ],
      "name": "2015",
      "turboThreshold": 0
    },
    {
      "color": "#fabd24",
      "index": 0,
      "type": "column",
      "pointWidth": "15",
      "legendIndex": 2,
      "data": [
        [
          "1",
          934
        ],
        [
          "2",
          57728
        ],
        [
          "3",
          104075
        ],
        [
          "4",
          11749
        ],
        [
          "5",
          270559
        ],
        [
          "6",
          107633
        ],
        [
          "7",
          26098
        ],
        [
          "8",
          23997
        ],
        [
          "9",
          13116
        ],
        [
          "10",
          28005
        ],
        [
          "11",
          9747
        ],
        [
          "12",
          3312
        ],
        [
          "13",
          7691
        ],
        [
          "14",
          82789
        ],
        [
          "15",
          6468
        ],
        [
          "16",
          147212
        ],
        [
          "17",
          32019
        ],
        [
          "18",
          31416
        ],
        [
          "19",
          29137
        ],
        [
          "20",
          123329
        ],
        [
          "30",
          17251
        ]
      ],
      "name": "Differenz 2015 zu 1995",
      "turboThreshold": 0
    },
    {
      "name": "Rhein",
      "animation": true,
      "data": [
        {
          "path": [
            "M",
            2611898.998,
            -1267399.905,
            "L",
            2612058.909,
            -1267359.334,
            2612200.486,
            -1267350.569,
            2612500.488,
            -1267380.57,
            2613176.587,
            -1267575.834,
            2613700.553,
            -1267750.607,
            2614300.587,
            -1268000.61,
            2614621.94156826,
            -1267973.86403593,
            2614599.062,
            -1267884.68,
            2614419.203,
            -1267906.424,
            2614205.191,
            -1267884.815,
            2613847.869,
            -1267738.097,
            2613472.536,
            -1267564.181,
            2613486.513,
            -1267447.856,
            2613450.527,
            -1267475.587,
            2613300.525,
            -1267450.582,
            2613097.525,
            -1267354.57,
            2613004.724,
            -1267333.97,
            2612868.919,
            -1267274.568,
            2612635.509,
            -1267211.568,
            2612444.672,
            -1267193.259,
            2612097.026,
            -1267173.089,
            2611933.01,
            -1267196.092,
            2611810.036,
            -1267238.412,
            2611784.18,
            -1267253.643,
            2611771.149,
            -1267239.611,
            2611740.489,
            -1267260.564,
            2611660.402,
            -1267321.312,
            2611620.316,
            -1267381.453,
            2611544.897,
            -1267414.515,
            2611405,
            -1267531.369,
            2611260.482,
            -1267720.57,
            2611142.399,
            -1267907.457,
            2610956.49,
            -1268231.564,
            2610964.344,
            -1268244.488,
            2610947.42,
            -1268296.742,
            2610934.264,
            -1268292.513,
            2610894.264,
            -1268510.962,
            2610889.241,
            -1268730.166,
            2610920.508,
            -1269114.948,
            2610875.30000368,
            -1269467.46893253,
            2610988.015,
            -1269434.556,
            2610967.612,
            -1269774.822,
            2610992.904,
            -1270027.827,
            2611066.413,
            -1270387.488,
            2611159.552,
            -1270661.324,
            2611314.911,
            -1271034.144,
            2611625.494,
            -1270932.22,
            2611417.793,
            -1271000.381,
            2611288.913,
            -1270732.042,
            2611172.704,
            -1270396.667,
            2611163.458,
            -1270236.848,
            2611122.804,
            -1270132.43,
            2611082.267,
            -1269843.15,
            2611086.492,
            -1269500.56,
            2611130.99,
            -1269110.558,
            2611121.964,
            -1268903.083,
            2611100.494,
            -1268740.563,
            2611110.744,
            -1268512.065,
            2611178.492,
            -1268240.565,
            2611265.963,
            -1268047.568,
            2611500.485,
            -1267693.56,
            2611740.484,
            -1267487.561,
            2611898.998,
            -1267399.905,
            "Z"
          ],
          "properties": {
            "OBJECTID_1": 22,
            "OBJID": null,
            "OBJECTID": 0,
            "TXT": "0",
            "ZTXT": null,
            "TYPE": null,
            "ZAHL": 0,
            "Shape_Leng": 14839.0255242,
            "Shape_Le_1": 14778.1650629,
            "Shape_Area": 1109076.31304
          }
        }
      ],
      "color": "#008AC3",
      "borderColor": "#fbfbfb",
      "tooltip": {
        "pointFormatter": function (){
						return '<br/>';
					}
      }
    },
    {
      "name": "Massstab",
      "animation": true,
      "type": "mapline",
      "data": [
        {
          "path": [
            "M",
            [
              2611898.998,
              1267399.905
            ],
            null
          ],
          "properties": {}
        }
      ],
      "color": "black",
      "tooltip": {
        "pointFormatter": function (){
						return '<br/>';
					}
      },
      "dataLabels": {
        "enabled": true,
        "formatter": function (){
						return '1 km';
					},
        "style": {
          "fontSize": "10px",
          "fontWeight": "normal",
          "color": "black"
        },
        "y": -10
      }
    }
  ],
  "xAxis": {
    "type": "category",
    "uniqueNames": false
  },
  "chart": {
    "borderColor": "#fbfbfb",
    "backgroundColor": "#fbfbfb",
    "width": 640,
    "height": 312,
    "spacing": [
      2,
      2,
      2,
      2
    ],
    "style": {
      "fontFamily": "Arial"
    },
    "type": "map",
    "inverted": false,
    "renderTo": "container-8006"
  },
  "title": {
    "style": {
      "fontSize": "10px",
      "fontWeight": "bold",
      "fontFamily": "Arial",
      "color": "#000000"
    },
    "align": "left",
    "text": "Bevölkerung ab 15 Jahren nach Ausbildungsniveau"
  },
  "subtitle": {
    "style": {
      "fontSize": "10px",
      "fontWeight": "normal",
      "fontFamily": "Arial",
      "color": "#000000"
    },
    "text": "",
    "align": "left"
  },
  "credits": {
    "enabled": true,
    "style": {
      "color": "#000000",
      "fontSize": "10px",
      "cursor": "default"
    },
    "position": {
      "align": "left",
      "verticalAlign": "bottom",
      "x": 10,
      "y": -15
    },
    "text": "Quelle: Statistisches Amt Basel-Stadt, Gebäude- und Wohnungsstatistik"
  },
  "colorAxis": {
    "min": 0,
    "gridLineColor": "#fbfbfb",
    "gridLineWidth": 1,
    "labels": {
      "style": {
        "color": "black",
        "cursor": "default",
        "fontSize": "10px",
        "textOverflow": "none"
      }
    },
    "marker": {
      "color": "black"
    }
  },
  "mapNavigation": {
    "enabled": true,
    "buttonOptions": {
      "align": "left",
      "verticalAlign": "bottom"
    }
  },
  "legend": {
    "enabled": true,
    "align": "left",
    "floating": true,
    "itemStyle": {
      "fontSize": "10px",
      "fontWeight": "normal"
    },
    "title": {
      "style": {
        "fontWeight": "normal",
        "fontSize": "10px"
      }
    },
    "layout": "horizontal",
    "verticalAlign": "top",
    "x": 45,
    "itemWidth": 500,
    "itemMarginBottom": 5
  },
  "exporting": {
    "allowHTML": true,
    "chartOptions": {
      "plotOptions": {
        "series": {
          "animation": false
        }
      }
    },
    "filename": "I.09.1.05816"
  },
  "customFunctions": {
    "pieSizeCategorical": function (value, conf){
				for (var i=0; i < conf.length; i++ ){
					//console.log('checking value ' + value);
					if (value >= conf[i].from && value < conf[i].to) {
						//console.log('found conf object:  + ' + JSON.stringify(conf[i]));
						return conf[i];
					}
				}
			},
    "pieSize": function (value, maxAbsValue, maxPieDiameter){
            	
            	function circleAreaByDiameter(diameter){
            		return Math.PI * diameter * diameter / 4;
            	}
            	
            	function circleDiameterByAre(area){	                		
            		return Math.sqrt(4 * area / Math.PI);
            	}
            	
            	/*
                var yAxis = chart.yAxis[0],
                    zoomFactor = (yAxis.dataMax - yAxis.dataMin) / (yAxis.max - yAxis.min);
                */
                
				//Negative values: return absolute value
				//size by Area: use sqrt of value to define size
				//var size = pieSizeMin + chart.chartWidth / 11 * pieSizeFactor *  Math.sqrt(Math.abs(value)) / maxAbsNumber; 
				
				//transform value to a number between 0 and 1 representing its relation to the min and max values
				//var relativeValue = (Math.abs(value) - minAbsValue) / (maxAbsValue - minAbsValue);
				
				//transform value to a number between 0 and 1, where value 0 is represented by 0 and maxAbsValue by 1
				var relativeValue = Math.abs(value) / maxAbsValue ;
				//console.log('absVal rel: '+ Math.abs(value) + ' ' + relativeValue);
				//infer the pie size 
				var maxPieArea = circleAreaByDiameter(maxPieDiameter);
				var area = relativeValue * maxPieArea;
				
				//var minPieArea = circleAreaByDiameter(minPieDiameter);
				//var area = relativeValue * (maxPieArea - minPieArea) + minPieArea;
				
				var diameter = circleDiameterByAre(area);
				//console.log('value absValue area diameter: ' + value + ' ' + Math.abs(value) + ' ' + area + ' ' + diameter);
				return diameter;
            },
    "defineTemplate": function (){

					//define new chart type
					// source: https://www.highcharts.com/blog/data-journalism/effectively-visualizing-us-election-results/, 
					//  which displays  http://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/maps/demo/map-pies/
					
					    
					// New map-pie series type that also allows lat/lon as center option.
					// Also adds a sizeFormatter option to the series, to allow dynamic sizing
					// of the pies.
					Highcharts.seriesType('mappie', 'pie', {
					    center: null, // Can't be array by default anymore
					    clip: true, // For map navigation
					    states: {
					        hover: {
					            halo: {
					                size: 5
					            }
					        }
					    },
					    dataLabels: {
					        enabled: false
					    }
					    
					}, {
					    getCenter: function () {
					        var options = this.options,
					            chart = this.chart,
					            slicingRoom = 2 * (options.slicedOffset || 0);
					        if (!options.center) {
					            options.center = [null, null]; // Do the default here instead
					        }
					        // Handle lat/lon support
					        if (options.center.lat !== undefined) {
					            var point = chart.fromLatLonToPoint(options.center);
					            options.center = [
					                chart.xAxis[0].toPixels(point.x, true),
					                chart.yAxis[0].toPixels(point.y, true)
					            ];
					        }
					        // Handle dynamic size
					        if (options.sizeFormatter) {
					            options.size = options.sizeFormatter.call(this);
					        }
					        // Call parent function
					        var result = Highcharts.seriesTypes.pie.prototype.getCenter.call(this);
					        // Must correct for slicing room to get exact pixel pos
					        result[0] -= slicingRoom;
					        result[1] -= slicingRoom;
					        return result;
					    },
					    translate: function (p) {
					        this.options.center = this.userOptions.center;
					        this.center = this.getCenter();
					        return Highcharts.seriesTypes.pie.prototype.translate.call(this, p);
					    }
					});

    		    },
    "getPointsExtremes": function (points){
	                var maxNumber = Number.NEGATIVE_INFINITY;
	                var maxAbsNumber = Number.NEGATIVE_INFINITY;
	                var minNumber = Number.POSITIVE_INFINITY;
	                var minAbsNumber = Number.POSITIVE_INFINITY;
					Highcharts.each(points, function (point) {
					    maxNumber = Math.max(maxNumber, point.value);
					    maxAbsNumber = Math.max(maxAbsNumber, Math.abs(point.value));
					    minNumber = Math.min(minNumber, point.value);
					    minAbsNumber = Math.min(minAbsNumber, Math.abs(point.value));
					});
					return {
					    maxNumber: maxNumber,
					    maxAbsNumber: maxAbsNumber,
					    minNumber: minNumber,
					    minAbsNumber: minAbsNumber
					};
				},
    "drawPies": function (chart, pieSizeSeries, choroplethSeries, pieSeriesConfig, pieSizeCatConfig, color){
                    
                    //iterate over each wohnviertel and draw the pies / bubbles
	                Highcharts.each(pieSizeSeries.points, function (data) {
	                    
	                    if (!data.value) {
	                        return; // Skip points with no data, if any
	                    }
	                    
	                	var correspondingMapSeriesItem = choroplethSeries.points[data.index];
	                	
	                	//define where to place the pies on the map
	                    var pieOffset = correspondingMapSeriesItem.pieOffset || {},
	                        centerLat = parseFloat(correspondingMapSeriesItem.properties.lat),
	                        centerLon = parseFloat(correspondingMapSeriesItem.properties.lon);
	                	
                        //create the highcharts pie chart config
	                    var currentPieSeries = function(config){
	                        //define default properties
	                        var mapPieConfig = {
    	                        type: 'mappie',
    	                        name: 'pie-' + data.series.name,
    	                        wohnviertel_Name: data["hc-key"],
    	                        wohnviertel_Id : correspondingMapSeriesItem.wohnviertel_Id,
    	                        zIndex: 6, // Keep pies above connector lines
    	                        borderWidth: 1,
    	                        tooltip: {
	                        	    headerFormat: '<span style="color:{point.color}">\u25CF</span> <span style="font-size: 10px"> {series.name} </span><br/>',
		                            pointFormatter: function () {
		                            	return correspondingMapSeriesItem.properties.LIBGEO +': <b>' + Highcharts.numberFormat((this.v),3) + '</b><br/>';
		                            }
    	                        },
	                            center: {
    	                            lat: centerLat + (pieOffset.lat || 0),
    	                            lon: centerLon + (pieOffset.lon || 0)
    	                        }, 
    	                        
    	                        //defaults that are normally overwritten
		                        sizeFormatter: function () {
		                            var fn = this.chart.options.customFunctions;
									//pie diameters in px
									var maxPieDiameter = 20;		 
									//pie Size proportional to absolute value, no categories used
		                            return fn.pieSize(Math.abs(data.value), fn.getPointsExtremes(pieSizeSeries.points).maxAbsNumber, maxPieDiameter); 
		                        },
		                        data: [
		                        	//Bubbles: Only one element in the array
		                        	{
		                        		name: pieSizeSeries.name,
		                        		//put absolute value in y, real value in v
		                        		y: Math.abs(data.value),
		                        		v: data.value,
		                        		color: color(data.value),
		                        		borderColor: color(data.value)
		                        	}
		                        ],
		                        dataLabels: {
							        enabled: false
							    }    	                        
	                        };
	                        //create the config handed in from the chart
	                        var pieTemplate = config(data, correspondingMapSeriesItem, color);
	                        //merge the two configs (2nd into first, see e.g. https://gist.github.com/TorsteinHonsi/f646f39d51d18b7d6bfb)
	                        return Highcharts.merge(true, mapPieConfig, pieTemplate);
	                    };
	                    
	                    // Add the pie for this wohnviertel to the chart
	                    chart.addSeries(currentPieSeries(pieSeriesConfig), false);
	                    
	                    /*
	                    // Draw connector to wohnviertel center if the pie has been offset
	                    if (pieOffset.drawConnector !== false) {
	                        var centerPoint = chart.fromLatLonToPoint({
	                                lat: centerLat,
	                                lon: centerLon
	                            }),
	                            offsetPoint = chart.fromLatLonToPoint({
	                                lat: centerLat + (pieOffset.lat || 0),
	                                lon: centerLon + (pieOffset.lon || 0)
	                            });
	                        pieSizeSeries.addPoint({
	                            name: wohnviertel.id,
	                            path: 'M' + offsetPoint.x + ' ' + offsetPoint.y +
	                                'L' + centerPoint.x + ' ' + centerPoint.y
	                        }, false);
	                    }
	                    */
	                    
	                });
	                // Only redraw once all pies and connectors have been added
	                chart.redraw();
				},
    "addLegendTitle": function (chart, title, x, y){
            		return chart.renderer.label(title, x, y)
         				.css({
    	                    fontSize: '10px',
    	                    fontWeight: 'bold'
    	                })
    	                .attr({
    			        	zIndex: 6,
    			        	//class: 'pieLegend'
    			        }).add();	                
                },
    "addLegendCircle": function (chart, x, y, radius, fill){
                	return chart.renderer.circle(x, y, radius, fill).attr({
    				    fill: fill,
    				    stroke: fill,
    				    'stroke-width': 1, 
    				    zIndex: 6,
    				    class: 'pieLegend'
    				}).add();
                },
    "addLegendLabel": function (chart, text, x, y, useHtml){
    				return chart.renderer.label(text, x, y, undefined, undefined, undefined, useHtml)
					.css({
	                    fontSize: '10px'
	                })
    				.attr({
    					zIndex: 6,
    					class: 'pieLegend'
    				}).add();
                },
    "addLegendSquare": function (chart, x, y, width, fill){
                	return chart.renderer.rect(x, y, width, width, 0).attr({
    		            'stroke-width':0,
    		            fill: fill,
    		            zIndex: 6,
    		            class: 'pieLegend'
    	        	}).add();
                },
    "AddPieLegendClickHandler": function (chart){
				    $('.pieLegend').click(function(){
						//Toggle visible of mappies
						Highcharts.each(chart.series, function (series) {
							if (series.userOptions.type == 'mappie'){
								series.setVisible(!series.visible, false);
							}
						});
						chart.redraw();
						
						
						//if useHTMl is true, text is in span elements within DIVs classed .pieLegend. Add the class to these spans
						$('.pieLegend>span').addClass('pieLegend').addClass('pieLegendHtmlText');
						//toggle active state of legend elements
						var pieLegendItems = $('.pieLegend');
						//backup original color
						pieLegendItems.each(function(i, v){
							if (!$(this).attr('fill_active')) {
								//if no fill color is defined, set to  black
								$(this).attr('fill_active', $(this).attr('fill') || 'black');	
							}
							if (!$(this).attr('stroke_active')) {
								$(this).attr('stroke_active', $(this).attr('stroke') || null);	
							}
						});
						//toggle color
						if (pieLegendItems.attr('fill') == pieLegendItems.attr('fill_active')){
							//set all to grey
							pieLegendItems.attr('fill', '#cccccc');
							//if stroke is present, toggle it
							pieLegendItems.each(function(i, v){
								//if stroke_active is present, set it to grey
								if ($(this).attr('stroke_active')) {
									$(this).attr('stroke', '#cccccc');
								}
							});
							//same for html text spans
							$('.pieLegendHtmlText').css('color', '#cccccc');
						} 
						else {
							pieLegendItems.each(function(i, v){
								//set each to its fill_active color
								$(this).attr('fill', $(this).attr('fill_active'));	
								$(this).attr('stroke', $(this).attr('stroke_active'));	
							});
							//same for html text spans
							$('.pieLegendHtmlText').css('color', 'black');
						}
					});
				}
  },
  "plotOptions": {
    "series": {
      "stacking": "normal",
      "pointPadding": 0,
      "groupPadding": 0.5,
      "borderWidth": 0
    }
  },
  "yAxis": {
    "labels": {
      "format": "{value:,.0f}"
    }
  },
  "tooltip": {
    "shared": true
  }
}